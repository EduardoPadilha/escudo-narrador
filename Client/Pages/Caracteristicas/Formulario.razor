@page "/caracteristica/formulario/{id?}"

@using System.ComponentModel.DataAnnotations
@using EscudoNarrador.Shared.Enums
@using EscudoNarrador.Shared.Entidades
@using EscudoNarrador.Shared.Dtos.Entrada
@using Nebularium.Tarrasque.Extensoes

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div style="max-width: 400px;margin: auto;">
    <EditForm Model="@modelo" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Edição de característica</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    @if (operacaoAtaulizacao)
                    {
                        <MudTooltip Text="Deletar">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="AbrirExclusaoPopUp" />
                        </MudTooltip>
                    }
                </CardHeaderActions>
            </MudCardHeader>

            <MudCardContent>
                <MudTextField Label="Nome" HelperText="Mín. 3 caracteres" Disabled="@operacaoAtaulizacao"
                              @bind-Value="modelo.Nome" For="@(() => modelo.Nome)" />

                <MudTextField Label="Tags" Class="mt-3" Lines="2" HelperText="Tags separadas com ',' ou ';'"
                              @bind-Value="modelo.TagsCampo" For="@(() => modelo.TagsCampo)" />

                <MudSelect T="TipoCaracteristica" Label="Tipo de característica"
                           MultiSelection="true" @bind-SelectedValues="modelo.Tipos">
                    @foreach (var state in Enum.GetValues<TipoCaracteristica>())
                    {
                        <MudSelectItem T="TipoCaracteristica" Value="@state">@state.DescricaoUnica()</MudSelectItem>
                    }
                </MudSelect>

                <MudField Label="Quantidade de Pontos">
                    <MudRating @bind-SelectedValue="modelo.Pontos" MaxValue="10" Color="Color.Dark"
                               FullIcon="@Icons.Material.Filled.Circle" EmptyIcon="@Icons.Material.Outlined.Lens" />
                </MudField>
            </MudCardContent>

            <MudCardActions>
                <MudButton Variant="Variant.Text" Link="/caracteristica">Voltar</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@(operacaoAtaulizacao?"Salvar": "Cadastrar")</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>


@code {
    [Parameter]
    public string Id { get; set; }
    private bool operacaoAtaulizacao = false;

    [CascadingParameter]
    public ErroComponente Error { get; set; }

    [CascadingParameter]
    public GerenciadorLoading Loading { get; set; }

    CaracteristicaFormulario modelo = new CaracteristicaFormulario();

    public class CaracteristicaFormulario
    {
        public CaracteristicaFormulario() { }
        public CaracteristicaFormulario(Caracteristica caracteristica)
        {
            Nome = caracteristica.Nome;
            TagsCampo = string.Join(";", caracteristica.Tags);
            Tipos = caracteristica.Tipo.ObterValores().ToHashSet();
            Pontos = caracteristica.Pontos;
        }
        [Required(ErrorMessage = "Nome não pode ser vazio.")]
        [StringLength(100, MinimumLength = 3, ErrorMessage = "Nome deve ter entre 3 e 100 caracteres.")]
        public string Nome { get; set; }
        [Required(ErrorMessage = "Tag não pode ser vazio.")]
        public string TagsCampo { get; set; } = "";
        public string[] Tags => TagsCampo.Contains(";") ? TagsCampo.Split(';') : TagsCampo.Split(',');
        public HashSet<TipoCaracteristica> Tipos { get; set; } = new HashSet<TipoCaracteristica>();
        public int Pontos { get; set; }

        public Caracteristica ParaEntidade()
        {
            var tipo = ((TipoCaracteristica)default);
            foreach (var t in Tipos)
                tipo |= t;

            return new Caracteristica
            {
                Nome = Nome,
                Tags = Tags,
                Tipo = tipo,
                Pontos = Pontos,
                Sistema = TipoSistema.Storyteller
            };
        }
    }

    private async void AbrirExclusaoPopUp()
    {
        var parameters = new DialogParameters();
        parameters.Add("TextoCorpo", $"Tem certeza que deseja deletar {modelo.Nome}? Esse procedirmento é irreversível.");
        parameters.Add("TextoBotao", "Deletar");
        parameters.Add("CorBotao", Color.Error);
        var dialogo = DialogService.Show<DialogoConfirmacao>("Cuidado =[", parameters);
        var resultado = await dialogo.Result;
        if (resultado.Cancelled) return;

        var deleteResultado = await Http.DeleteAsync<Caracteristica>($"/api/caracteristica/{modelo.Nome}", Loading.AtualizarLoading);
        if (deleteResultado.IsSuccessStatusCode)
        {
            Snackbar.Add("Registro deletado!", Severity.Success);
            LimparFormulario();
            return;
        }

        Error.ProcessarErro($"[{deleteResultado.StatusCode}]: {deleteResultado.ReasonPhrase}");
    }

    private void LimparFormulario()
    {
        modelo = new CaracteristicaFormulario();
        StateHasChanged();
    }

    private async void OnValidSubmit(EditContext context)
    {
        HttpResponseMessage resposta;
        if (operacaoAtaulizacao)
            resposta = await Http.PutAsJsonAsync("/api/caracteristica", AddCaracteristicaDto.Construir(modelo.ParaEntidade()), Loading.AtualizarLoading);
        else
            resposta = await Http.PostAsJsonAsync("/api/caracteristica", AddCaracteristicaDto.Construir(modelo.ParaEntidade()), Loading.AtualizarLoading);

        if (!resposta.IsSuccessStatusCode)
        {
            var msg = $"[{resposta.StatusCode}]: {resposta.ReasonPhrase}";
            Error.ProcessarErro(msg);
            return;
        }

        LimparFormulario();

        Snackbar.Add("Característica salva!", Severity.Success);
    }

    protected async override void OnInitialized()
    {
        operacaoAtaulizacao = !Id.LimpoNuloBranco();
        if (!operacaoAtaulizacao) return;
        try
        {
            var caracteristica = await Http.GetAsync<Caracteristica>($"/api/caracteristica/{Id}", atualizaLoading: Loading.AtualizarLoading);
            if (caracteristica == null)
            {
                Error.ProcessarErro($"Não foi possível recuperar o registro {Id} para edição.");
                return;
            }
            modelo = new CaracteristicaFormulario(caracteristica);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Loading.AtualizarLoading(false);
            Error.ProcessarErro(e);
        }
    }
}
