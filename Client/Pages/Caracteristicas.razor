@page "/caracteristica"
@using EscudoNarrador.Shared.Entidades
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@using EscudoNarrador.Shared.Extensoes
@using Nebularium.Tarrasque.Extensoes

@inject NavigationManager Url
@inject HttpClient Http

<MudText Typo="Typo.h4">Características</MudText>

<style>
    .app-fab--absolute {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
    }
</style>

@*@if (caracteristicaLista == null)
    {
        <p><em>Carregando...</em></p>
    }
    else
    {*@
<MudFab Class="app-fab--absolute" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" @ref="table"
          ServerData="@(new Func<TableState, Task<TableData<Caracteristica>>>(ServerReload))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Características</MudText>
        <MudToolBarSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="nome, tags separadas por ';'" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>Tipo</MudTh>
        <MudTh>Tags</MudTh>
        <MudTh>Pontos Fixos</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Nome</MudTd>
        <MudTd DataLabel="Tipo">@context.Tipo.ToString()</MudTd>
        <MudTd DataLabel="Tags">@string.Join(", ", context.Tags)</MudTd>
        <MudTd DataLabel="Pontos Fixos">@context.Pontos</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@*}*@

@code {
    private IEnumerable<Caracteristica> pagedData;
    private MudTable<Caracteristica> table;

    private int totalItems;
    private string searchString = "";

    private async Task<TableData<Caracteristica>> ServerReload(TableState state)
    {
        var tags = ObtemTagsDaBusca(searchString);
        var termoBusca = RemoveHashTags(searchString);

        var dataJson = await Http.GetAsync("/api/caracteristica", new Dictionary<string, string>
{
            {"nome", termoBusca },
            {"tags", string.Join(';', tags) }
        });
        var caracteristicas = JsonConvert.DeserializeObject<List<Caracteristica>>(dataJson);

        totalItems = caracteristicas.Count();

        pagedData = caracteristicas.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Caracteristica>() { TotalItems = totalItems, Items = pagedData };
    }

    private string RemoveHashTags(string texto)
    {
        var regex = new Regex(@"#[\d\w]*");
        texto = regex.Replace(texto, string.Empty);
        return texto.HigienizaString();
    }

    private string[] ObtemTagsDaBusca(string texto)
    {
        var correspondencias = Regex.Matches(texto, @"#[\d\w]*");
        return correspondencias.Select(match => match.Value.RemoverCaracteresEspeciais().HigienizaString()).ToArray();
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    try
    //    {
    //        caracteristicaLista = await Http.GetFromJsonAsync<Caracteristica[]>("/api/caracteristica");
    //    }
    //    catch (Exception ex)
    //    {
    //        Console.WriteLine(ex.ToString());
    //    }
    //}
}